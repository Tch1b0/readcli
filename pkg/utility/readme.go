package utility

import (
	"bytes"
	"strings"

	"github.com/mh-cbon/emd/emd"
)

type Readme struct {
	Title         string   `json:"title"`
	Description   string   `json:"description"`
	RepositoryURL string   `json:"repository-url"`
	Requirements  []string `json:"requirements"`
	Watermark     bool     `json:"watermark"`
}

func (r Readme) ToMap() map[string]interface{} {
	splittedRepo := strings.Split(r.RepositoryURL, "/")
	var username string
	var repoName string
	if len(splittedRepo) < 3 {
		username = "<USERNAME>"
		repoName = "<REPOSITORY-NAME>"
	} else {
		username = splittedRepo[len(splittedRepo)-2]
		repoName = splittedRepo[len(splittedRepo)-1]
	}
	return map[string]interface{}{
		"Title":          r.Title,
		"Description":    r.Description,
		"RepositoryURL":  r.RepositoryURL,
		"Username":       username,
		"RepositoryName": repoName,
		"Watermark":      r.Watermark,
	}
}

func (readme Readme) Render() ([]byte, error) {
	gen := emd.NewGenerator()
	gen.AddTemplate(README_TEMPLATE)
	data := readme.ToMap()
	data["HasRequirements"] = len(readme.Requirements) != 0
	data["RequirementList"] = CreateMarkdownList(readme.Requirements)
	gen.SetDataMap(data)

	var rendered bytes.Buffer
	if err := gen.Execute(&rendered); err != nil {
		return []byte{}, err
	}

	return rendered.Bytes(), nil
}

const README_TEMPLATE = `# {{ .Title }}

![shield](https://img.shields.io/github/license/{{ .Username }}/{{ .RepositoryName }})

{{ .Description }}

{{ if .HasRequirements }}
## requirements

{{ .RequirementList }}
{{ end }}

## Contributors

-	{{ .Username }}

{{ if .Watermark }}
*README generated by [readcli](https://github.com/Tch1b0/readcli)*
{{ end }}`
